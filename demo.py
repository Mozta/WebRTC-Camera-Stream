#!/usr/bin/env python3
"""
üé¨ Demo Script - WebRTC Camera Stream (Raspberry Pi Edition)

Script de demostraci√≥n que muestra todas las caracter√≠sticas implementadas
en la rama feature/raspberry.
"""

import asyncio
import subprocess
import sys
import time
import json
from pathlib import Path

def print_header(title):
    """Imprimir encabezado con estilo"""
    print("\n" + "="*60)
    print(f"üé¨ {title}")
    print("="*60)

def print_step(step, description):
    """Imprimir paso de la demostraci√≥n"""
    print(f"\nüìã Paso {step}: {description}")
    print("-" * 40)

def run_command(cmd, description=""):
    """Ejecutar comando y mostrar resultado"""
    if description:
        print(f"üíª {description}")
    print(f"$ {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è  {result.stderr}")
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("‚è∞ Comando tom√≥ demasiado tiempo (timeout)")
        return False
    except Exception as e:
        print(f"‚ùå Error ejecutando comando: {e}")
        return False

def demo_system_info():
    """Demostraci√≥n de informaci√≥n del sistema"""
    print_header("INFORMACI√ìN DEL SISTEMA")
    
    print_step(1, "Detectar plataforma y c√°maras disponibles")
    run_command("python camera_module.py", "Ejecutando m√≥dulo de c√°maras independiente")
    
    print_step(2, "Informaci√≥n completa del servidor")
    run_command("python app.py --info", "Informaci√≥n desde el servidor principal")

def demo_module_features():
    """Demostraci√≥n de caracter√≠sticas del m√≥dulo"""
    print_header("CARACTER√çSTICAS DEL M√ìDULO")
    
    print_step(1, "Importar y probar clases principales")
    
    test_script = '''
from camera_module import CameraDetector, CameraFactory, CameraType

print("üîç Detecci√≥n de plataforma:")
print(f"  Plataforma: {CameraDetector.detect_platform()}")
print(f"  C√°mara recomendada: {CameraDetector.get_best_camera_type()}")

print("\\nüìπ C√°maras disponibles:")
cameras = CameraDetector.list_available_cameras()
for i, camera in enumerate(cameras, 1):
    print(f"  {i}. {camera}")

print("\\nüè≠ Factory de VideoTracks:")
try:
    track = CameraFactory.create_video_track(CameraType.AUTO, width=320, height=240)
    print(f"  ‚úÖ VideoTrack creado: {type(track).__name__}")
except Exception as e:
    print(f"  ‚ùå Error: {e}")
    '''
    
    with open("temp_test.py", "w") as f:
        f.write(test_script)
    
    run_command("python temp_test.py", "Probando clases del m√≥dulo")
    
    # Limpiar archivo temporal
    Path("temp_test.py").unlink(missing_ok=True)

def demo_cli_arguments():
    """Demostraci√≥n de argumentos CLI"""
    print_header("ARGUMENTOS DE L√çNEA DE COMANDOS")
    
    # Lista de demostraciones de argumentos
    cli_demos = [
        ("--help", "Mostrar ayuda completa"),
        ("--info", "Informaci√≥n del sistema"),
        ("--camera-type opencv --width 320 --height 240 --fps 15", "Configuraci√≥n personalizada"),
    ]
    
    for i, (args, desc) in enumerate(cli_demos, 1):
        print_step(i, desc)
        run_command(f"python app.py {args}", f"Probando: {args}")

def demo_api_endpoints():
    """Demostraci√≥n de endpoints de API"""
    print_header("ENDPOINTS DE API")
    
    print("üöÄ Para esta demo, necesitamos iniciar el servidor...")
    print("üí° En otra terminal, ejecuta: python app.py --port 8082")
    print("‚è≥ Esperando 5 segundos para que inicies el servidor...")
    
    for i in range(5, 0, -1):
        print(f"‚è∞ {i}...", end=" ", flush=True)
        time.sleep(1)
    print("\n")
    
    print_step(1, "Probar endpoint de informaci√≥n")
    
    # Verificar si el servidor est√° corriendo
    import urllib.request
    import urllib.error
    
    try:
        with urllib.request.urlopen("http://localhost:8082/camera-info", timeout=5) as response:
            data = json.loads(response.read().decode())
            print("‚úÖ Endpoint /camera-info responde:")
            print(json.dumps(data, indent=2))
    except urllib.error.URLError:
        print("‚ùå Servidor no est√° corriendo en puerto 8082")
        print("üí° Inicia con: python app.py --port 8082")
    except Exception as e:
        print(f"‚ùå Error conectando: {e}")

def demo_file_structure():
    """Mostrar estructura de archivos creados"""
    print_header("ESTRUCTURA DE ARCHIVOS")
    
    files_info = [
        ("camera_module.py", "M√≥dulo principal con clases de c√°mara"),
        ("app.py", "Servidor WebRTC mejorado"),
        ("index.html", "Interface web actualizada"),
        ("setup_raspberry.py", "Script de configuraci√≥n para Raspberry Pi"),
        ("requirements-raspberry.txt", "Dependencias espec√≠ficas para RPi"),
        ("README-raspberry.md", "Documentaci√≥n completa"),
        ("TESTING.md", "Gu√≠a de pruebas")
    ]
    
    print("üìÅ Archivos creados/modificados:")
    for filename, description in files_info:
        if Path(filename).exists():
            size = Path(filename).stat().st_size
            print(f"  ‚úÖ {filename:<25} ({size:,} bytes) - {description}")
        else:
            print(f"  ‚ùå {filename:<25} (no encontrado) - {description}")

def demo_comparison():
    """Comparar versi√≥n original vs nueva"""
    print_header("COMPARACI√ìN: ANTES vs AHORA")
    
    print("üìä Funcionalidades a√±adidas:")
    
    features = [
        "‚úÖ Auto-detecci√≥n de plataforma (Raspberry Pi vs Computer)",
        "‚úÖ Soporte modular para m√∫ltiples tipos de c√°mara",
        "‚úÖ PiCamera2 para Raspberry Pi Camera Module",
        "‚úÖ Argumentos CLI para configuraci√≥n completa",
        "‚úÖ Endpoint de informaci√≥n del sistema (/camera-info)",
        "‚úÖ Fallback autom√°tico entre tipos de c√°mara",
        "‚úÖ Configuraci√≥n din√°mica de resoluci√≥n y FPS",
        "‚úÖ Script de setup autom√°tico para Raspberry Pi",
        "‚úÖ Requirements separados por plataforma",
        "‚úÖ Interface web con informaci√≥n del sistema",
        "‚úÖ Manejo robusto de errores",
        "‚úÖ Documentaci√≥n completa y gu√≠as de prueba"
    ]
    
    for feature in features:
        print(f"  {feature}")
    
    print(f"\nüìà Estad√≠sticas:")
    print(f"  ‚Ä¢ Archivos a√±adidos: 5 nuevos")
    print(f"  ‚Ä¢ Archivos modificados: 2 existentes") 
    print(f"  ‚Ä¢ L√≠neas de c√≥digo: ~800+ nuevas")
    print(f"  ‚Ä¢ Comandos CLI: 8+ opciones")
    print(f"  ‚Ä¢ Tipos de c√°mara soportados: 2 (OpenCV + PiCamera2)")

def main():
    """Funci√≥n principal de la demostraci√≥n"""
    print("üé¨ DEMO: WebRTC Camera Stream - Raspberry Pi Edition")
    print("üçì Mostrando todas las nuevas caracter√≠sticas implementadas")
    print("‚è∞ Duraci√≥n estimada: 3-5 minutos")
    
    input("\nüëÜ Presiona Enter para comenzar...")
    
    # Ejecutar demostraciones
    demo_system_info()
    input("\nüëÜ Presiona Enter para continuar...")
    
    demo_module_features()
    input("\nüëÜ Presiona Enter para continuar...")
    
    demo_cli_arguments()
    input("\nüëÜ Presiona Enter para continuar...")
    
    demo_file_structure()
    input("\nüëÜ Presiona Enter para continuar...")
    
    demo_comparison()
    input("\nüëÜ Presiona Enter para continuar...")
    
    demo_api_endpoints()
    
    # Conclusi√≥n
    print_header("DEMO COMPLETADA")
    print("üéâ ¬°Felicitaciones! Has visto todas las nuevas caracter√≠sticas.")
    print("\nüìã Pr√≥ximos pasos sugeridos:")
    print("  1. Probar en Raspberry Pi real con: python setup_raspberry.py")
    print("  2. Ejecutar pruebas completas con: python -m pytest (si tienes tests)")
    print("  3. Crear Pull Request para merge a main")
    print("  4. Actualizar documentaci√≥n principal")
    
    print("\nüí° Comandos √∫tiles para recordar:")
    print("  ‚Ä¢ python app.py --info           (informaci√≥n del sistema)")
    print("  ‚Ä¢ python app.py --camera-type picamera2  (forzar PiCamera2)")
    print("  ‚Ä¢ python app.py --width 1280 --height 720  (resoluci√≥n HD)")
    print("  ‚Ä¢ python setup_raspberry.py     (setup para Raspberry Pi)")
    
    print("\nüîó Enlaces importantes:")
    print("  ‚Ä¢ Documentaci√≥n: README-raspberry.md")
    print("  ‚Ä¢ Gu√≠a de pruebas: TESTING.md")
    print("  ‚Ä¢ Repositorio: https://github.com/Mozta/WebRTC-Camera-Stream")
    
    print("\n‚ú® ¬°Gracias por usar WebRTC Camera Stream!")

if __name__ == "__main__":
    main()
